#include <ezButton.h>

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// I hope this code brings some love and peace to this mad world we live in <3

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'chronic-snoop', 128x64px
const unsigned char epd_bitmap_chronic_snoop [] PROGMEM = {
	0xfe, 0xdb, 0x5a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0xdf, 0x20, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0xeb, 0x6d, 0x6b, 0x55, 0x55, 0x54, 0x91, 0x55, 0x6a, 0xb8, 0xb2, 0x4a, 0xaa, 0xaa, 0xaa, 0xab, 
	0xfd, 0xb6, 0xad, 0x6a, 0xaa, 0xaa, 0x4a, 0x55, 0xa0, 0xa2, 0xb4, 0x01, 0xdd, 0xdd, 0xff, 0xfe, 
	0xee, 0xdb, 0x6a, 0xaa, 0xaa, 0x92, 0xa9, 0x55, 0x49, 0xdc, 0x4f, 0xa1, 0x6e, 0xee, 0xaa, 0xb7, 
	0xf5, 0xaa, 0xb5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x47, 0x77, 0xd0, 0xc8, 0xb5, 0xb7, 0xff, 0xfd, 
	0xde, 0xf6, 0xd5, 0xaa, 0xaa, 0x54, 0x92, 0x55, 0x29, 0xcc, 0x4b, 0x50, 0x7f, 0x7a, 0xaa, 0xaf, 
	0xf5, 0xab, 0x56, 0xaa, 0xa9, 0x52, 0xa9, 0x55, 0x43, 0x93, 0x58, 0x42, 0x55, 0xd7, 0xff, 0xfb, 
	0x5e, 0xdd, 0x6a, 0xad, 0x56, 0xaa, 0x4a, 0xaa, 0x08, 0x02, 0x65, 0xb4, 0x3e, 0xbd, 0x55, 0xbf, 
	0xf5, 0x6a, 0xaa, 0xaa, 0xa9, 0x4a, 0xa9, 0x55, 0x41, 0x24, 0x29, 0x6e, 0xab, 0xef, 0xff, 0x6d, 
	0xaf, 0xb6, 0xda, 0xaa, 0xaa, 0xaa, 0x94, 0xaa, 0x14, 0x00, 0x85, 0x4a, 0x1d, 0x5a, 0xab, 0xff, 
	0x75, 0x55, 0x6a, 0xd5, 0x55, 0x54, 0xa5, 0x55, 0x40, 0x00, 0x15, 0x14, 0x17, 0xef, 0xfd, 0xb7, 
	0xdb, 0x6d, 0xab, 0x2a, 0xaa, 0xa5, 0x55, 0x28, 0x00, 0x00, 0x40, 0xd7, 0x1a, 0xba, 0xae, 0xfd, 
	0x6d, 0xb6, 0xaa, 0xaa, 0xaa, 0x55, 0x29, 0x56, 0x17, 0xf4, 0x02, 0x08, 0x1f, 0x6f, 0xf7, 0xaf, 
	0xb6, 0xd5, 0x55, 0x55, 0x55, 0x52, 0xa5, 0x54, 0xfa, 0xd1, 0x08, 0x25, 0x6a, 0xda, 0xad, 0xfb, 
	0x6b, 0x55, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 0x17, 0x4a, 0x00, 0x11, 0xb7, 0xb7, 0x7e, 0xdf, 
	0xbd, 0x6d, 0x5b, 0x55, 0x55, 0x54, 0xaa, 0xa8, 0x55, 0x43, 0xc0, 0xba, 0x1d, 0x7d, 0xd7, 0x76, 
	0xd5, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0x94, 0x20, 0x08, 0x6b, 0xd6, 0xfb, 0xff, 
	0x6a, 0xb6, 0xd5, 0x55, 0x55, 0x55, 0x55, 0x51, 0x02, 0x03, 0x88, 0x09, 0x5d, 0x7b, 0x5d, 0x57, 
	0xb7, 0x5a, 0xaa, 0xaa, 0xad, 0x55, 0x54, 0xaa, 0x43, 0xa8, 0x00, 0x25, 0x2f, 0xad, 0xef, 0xfd, 
	0x5a, 0xd5, 0x5a, 0xaa, 0xd5, 0x55, 0x56, 0xa9, 0x52, 0x82, 0xb4, 0x04, 0x5a, 0xdb, 0x75, 0x57, 
	0xaa, 0xaa, 0xab, 0x55, 0x55, 0x56, 0xd9, 0x54, 0x03, 0xfa, 0x41, 0x05, 0x9b, 0x6f, 0xaf, 0xfd, 
	0x6d, 0x6d, 0xaa, 0xab, 0x55, 0xb5, 0x65, 0x2a, 0xb6, 0xb0, 0x0a, 0x06, 0x1d, 0xba, 0xfa, 0xb7, 
	0xb5, 0xaa, 0xb5, 0xb5, 0x56, 0xaa, 0xaa, 0xaa, 0x0d, 0xfe, 0xb4, 0x80, 0x56, 0xed, 0xaf, 0xde, 
	0xd6, 0xaa, 0xd5, 0x55, 0x55, 0x5a, 0xa9, 0x54, 0x37, 0xaf, 0xea, 0x01, 0x1b, 0xb6, 0xda, 0xf7, 
	0x5a, 0xad, 0x55, 0x56, 0xd5, 0x55, 0xaa, 0xab, 0x5e, 0xd5, 0xba, 0x80, 0x2d, 0x6d, 0xb7, 0x5b, 
	0x55, 0x55, 0x55, 0xab, 0x55, 0x56, 0xaa, 0x55, 0xcb, 0xb6, 0xe9, 0x00, 0x37, 0xb7, 0x7b, 0xbd, 
	0xaa, 0xd5, 0x55, 0x5a, 0xaa, 0xaa, 0xa5, 0x55, 0x5e, 0xf4, 0xa4, 0x40, 0x5a, 0xda, 0xd6, 0xee, 
	0xdb, 0x5a, 0xb5, 0x6b, 0x55, 0x55, 0x54, 0xab, 0x6a, 0x95, 0x11, 0x10, 0x6f, 0x6f, 0xbb, 0x75, 
	0x55, 0x55, 0xba, 0xad, 0x55, 0x56, 0x92, 0xaa, 0x20, 0x06, 0x04, 0x40, 0x35, 0xba, 0xdd, 0xaf, 
	0x6a, 0xaa, 0xd5, 0x55, 0x5a, 0xa9, 0x55, 0x55, 0x02, 0x05, 0xa1, 0x00, 0x3a, 0xd6, 0xeb, 0x75, 
	0xad, 0x55, 0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x20, 0x4a, 0x14, 0x50, 0x2f, 0x7b, 0x5d, 0xde, 
	0xaa, 0xdb, 0x55, 0x55, 0x55, 0x55, 0x24, 0xab, 0x40, 0x10, 0x01, 0x04, 0x35, 0xad, 0xb6, 0xb5, 
	0x55, 0x55, 0x6d, 0x6a, 0xaa, 0xaa, 0x95, 0x55, 0x28, 0x80, 0x54, 0x50, 0x2d, 0x6a, 0xdb, 0xdb, 
	0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x94, 0xaa, 0xaa, 0x80, 0x14, 0x01, 0x02, 0x06, 0xdf, 0x6d, 0x6e, 
	0xad, 0x55, 0xd5, 0x75, 0x55, 0x52, 0xa9, 0x2a, 0x80, 0x01, 0x14, 0x48, 0x19, 0xb5, 0xb6, 0xb5, 
	0x55, 0x56, 0xaa, 0xaa, 0xaa, 0xaa, 0xa4, 0xaa, 0x8a, 0xa8, 0x82, 0x01, 0x09, 0x6a, 0xdb, 0xdb, 
	0x55, 0x5d, 0xab, 0xf5, 0x55, 0x55, 0x55, 0x55, 0x40, 0x05, 0x28, 0x95, 0x46, 0xbd, 0x6d, 0x6d, 
	0x55, 0x56, 0xd4, 0x95, 0x55, 0x2a, 0x4a, 0xaa, 0xa1, 0x20, 0x82, 0x03, 0x90, 0x4b, 0xb6, 0xb7, 
	0x55, 0x5e, 0xeb, 0x55, 0x55, 0x52, 0xa9, 0x4a, 0xa0, 0x0a, 0x14, 0x97, 0xb1, 0x16, 0xd5, 0xda, 
	0xaa, 0xaa, 0xb5, 0x55, 0x4a, 0xaa, 0x94, 0xaa, 0x88, 0x15, 0x00, 0x13, 0x92, 0x4b, 0x5e, 0xad, 
	0x55, 0x5d, 0xca, 0xaa, 0xaa, 0x94, 0xa5, 0x55, 0x62, 0x20, 0x54, 0x4b, 0x74, 0x1d, 0x6a, 0xeb, 
	0x55, 0x55, 0x4d, 0x54, 0xa9, 0x52, 0xaa, 0x4a, 0xa8, 0x15, 0x00, 0x3f, 0xff, 0xe5, 0xb7, 0x5d, 
	0x55, 0x7f, 0xa1, 0x52, 0x95, 0x55, 0x25, 0x55, 0x40, 0x80, 0x23, 0xfb, 0xef, 0xfe, 0xda, 0xd5, 
	0x4a, 0x98, 0x88, 0x95, 0x55, 0x55, 0x52, 0xaa, 0xa8, 0x00, 0x03, 0xef, 0xff, 0xff, 0xab, 0x6e, 
	0xa9, 0x6a, 0xd3, 0x55, 0x55, 0x4a, 0x94, 0x95, 0x50, 0x00, 0x0b, 0xff, 0xff, 0xff, 0xfd, 0x55, 
	0x55, 0x52, 0x82, 0x2a, 0xa4, 0xa9, 0x52, 0xaa, 0xa8, 0x11, 0x27, 0xbf, 0xdf, 0xff, 0xf5, 0xbb, 
	0x25, 0x6c, 0x2a, 0xaa, 0x55, 0x54, 0x95, 0x55, 0x56, 0x80, 0x4b, 0xff, 0x7f, 0xdf, 0xfe, 0xd5, 
	0x55, 0x58, 0x05, 0x55, 0x55, 0x2a, 0xa9, 0x2a, 0xb9, 0x40, 0xaf, 0xef, 0xf6, 0xfd, 0x7f, 0x6e, 
	0x92, 0x90, 0x15, 0x25, 0x4a, 0xa5, 0x24, 0xa5, 0x4e, 0x83, 0x57, 0xff, 0xdf, 0xf1, 0x5f, 0xaa, 
	0xaa, 0x60, 0x42, 0xaa, 0x54, 0xaa, 0xaa, 0xaa, 0x5a, 0x25, 0x5f, 0xbf, 0x6a, 0xcf, 0xff, 0xb6, 
	0x95, 0x5a, 0x01, 0x29, 0x52, 0x92, 0x4a, 0x94, 0x1d, 0x0a, 0xbf, 0xf7, 0xa2, 0x2f, 0xf7, 0xdb, 
	0x52, 0xa8, 0x84, 0x95, 0x55, 0x55, 0x29, 0x55, 0x0b, 0xf1, 0xff, 0x6e, 0x80, 0x80, 0xfd, 0xea, 
	0x4a, 0x0e, 0x00, 0x55, 0x4a, 0xa9, 0x54, 0xa0, 0x4e, 0xce, 0xdf, 0xd8, 0x02, 0x00, 0x7f, 0xf7, 
	0x29, 0x40, 0x24, 0x24, 0xa9, 0x25, 0x25, 0x2a, 0x1b, 0xab, 0xff, 0x60, 0x08, 0x10, 0x7d, 0xf5, 
	0x55, 0x20, 0x00, 0x15, 0x2a, 0xaa, 0x94, 0x81, 0x5c, 0xb7, 0xad, 0x80, 0x00, 0x24, 0x7e, 0xfa, 
	0xa4, 0x8a, 0x88, 0x54, 0xa5, 0x52, 0x52, 0xd4, 0x05, 0x5a, 0xf5, 0x40, 0x20, 0x00, 0x3f, 0xdd, 
	0x52, 0xa0, 0x01, 0x0a, 0xaa, 0x49, 0x4a, 0x80, 0x82, 0xa3, 0xa8, 0x00, 0x00, 0x4a, 0x1f, 0x7e, 
	0x8a, 0x8a, 0x90, 0x2a, 0x95, 0x2a, 0xa9, 0x54, 0x21, 0x4d, 0x65, 0x08, 0x80, 0x81, 0x1f, 0x7b, 
	0x55, 0x65, 0x02, 0x24, 0xa9, 0x55, 0x25, 0x01, 0x00, 0x35, 0x90, 0x20, 0x00, 0x14, 0x47, 0xae, 
	0xa9, 0x10, 0x80, 0x15, 0x55, 0x49, 0x55, 0x44, 0x90, 0x8a, 0x50, 0xa0, 0x01, 0x00, 0x23, 0xdf, 
	0x14, 0xa2, 0x20, 0x0a, 0x49, 0x2a, 0x92, 0x05, 0x00, 0x11, 0x05, 0xc0, 0x00, 0x54, 0xa0, 0xdf, 
	0x52, 0xa0, 0x82, 0x09, 0x54, 0xa4, 0xa9, 0x40, 0x00, 0x00, 0x0a, 0xa0, 0x04, 0x00, 0x30, 0xed, 
	0x4a, 0x80, 0x00, 0x45, 0x25, 0x55, 0x24, 0x11, 0x50, 0x00, 0x37, 0xc0, 0x20, 0x92, 0x50, 0xf7, 
	0x54, 0xa0, 0x10, 0x0a, 0x94, 0x92, 0x91, 0x00, 0x80, 0x00, 0x5b, 0x40, 0x00, 0x20, 0xb0, 0xef
};

// Floats for ADC voltage & Input voltage
float adc_voltage = 0.0;
float in_voltage = 0.0;
 
// Floats for resistor values in divider (in ohms)
float R1 = 30000.0;
float R2 = 7500.0; 
 
// Float for Reference Voltage
float ref_voltage = 5.0;
 
// Integer for ADC value
int adc_value = 0;
 

const int PIN_RED   = 4;
const int PIN_GREEN = 3;
const int PIN_BLUE  = 5;
const int PIN_HEATER  = 2;
const int ButtonPin = 7;
const int VoltageSensorPIN = 6;
ezButton button(ButtonPin);  // create ezButton object that attach to pin 7;
bool fire = false;
float loopTime;
float firedstarted;
long pulseOvenTime = 750; //adjust this value to change speed of pulse


void setup() {

  pinMode(PIN_HEATER,   OUTPUT);
  pinMode(PIN_RED,   OUTPUT);
  pinMode(PIN_GREEN, OUTPUT);
  pinMode(PIN_BLUE,  OUTPUT);
  button.setDebounceTime(50); // set debounce time to 50 milliseconds


 Serial.begin(115200);
   // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  
  // Draw bitmap on the screen
  display.drawBitmap(0, 0, epd_bitmap_chronic_snoop, 128, 64, 1);
  display.display();
  delay(5000);
}

void loop() {
 button.loop(); // MUST call the loop() function first#

    adc_value = analogRead(VoltageSensorPIN);
   adc_voltage  = (adc_value * ref_voltage) / 1024.0; 
   in_voltage = adc_voltage / (R2/(R1+R2)); 


  loopTime = millis();

display.clearDisplay();
display.drawRoundRect(83, 4, 2, 7, 1, WHITE);
display.drawRoundRect(85, 0, 43, 15, 3, WHITE);
display.setTextSize(1);
display.setTextColor(WHITE);     
display.setCursor(87, 4);             
display.println(in_voltage, 2);
display.setCursor(119,4);             
display.println("v");
display.setCursor(0,10);             
display.println("millis");
display.setCursor(0,20);             
display.println(loopTime);


 if(button.isPressed()) {
    fire = !fire;
    firedstarted = loopTime;
 }

  if(fire) {

    if(loopTime - firedstarted < pulseOvenTime){
      digitalWrite(PIN_HEATER, HIGH);
      analogWrite(PIN_RED,   255);
      analogWrite(PIN_GREEN, 0);
      analogWrite(PIN_BLUE,  0); 
    }
    else{
      digitalWrite(PIN_HEATER, LOW);
      analogWrite(PIN_RED,   0);
      analogWrite(PIN_GREEN, 255);
      analogWrite(PIN_BLUE,  128);
    }

    if (loopTime - firedstarted > pulseOvenTime*2){
      firedstarted = loopTime;
    }

    display.setCursor(0,30);             
    display.println(loopTime-firedstarted);
  }
  else {
    digitalWrite(PIN_HEATER, LOW);
    analogWrite(PIN_RED,   0);
    analogWrite(PIN_GREEN, 255);
    analogWrite(PIN_BLUE,  128);
    firedstarted = 0;
  }
  display.display();
}
